/*
 * Geocoding OSM
 *
 * With the Geocoding OSM service places can be searched based on OSM data. The search is based on an address, text input or a geographical position.
 *
 * The version of the OpenAPI document: 1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.geocoding.osm.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.geocoding.osm.Model
{
    /// <summary>
    /// The result of a places search.
    /// </summary>
    [DataContract(Name = "PlacesSearchResult")]
    public partial class PlacesSearchResult : IEquatable<PlacesSearchResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesSearchResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlacesSearchResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesSearchResult" /> class.
        /// </summary>
        /// <param name="places">The places which where found. (required).</param>
        /// <param name="warnings">A list of warnings concerning the validity of the result..</param>
        public PlacesSearchResult(List<Place> places = default(List<Place>), List<Warning> warnings = default(List<Warning>))
        {
            // to ensure "places" is required (not null)
            if (places == null)
            {
                throw new ArgumentNullException("places is a required property for PlacesSearchResult and cannot be null");
            }
            this.Places = places;
            this.Warnings = warnings;
        }

        /// <summary>
        /// The places which where found.
        /// </summary>
        /// <value>The places which where found.</value>
        [DataMember(Name = "places", IsRequired = true, EmitDefaultValue = true)]
        public List<Place> Places { get; set; }

        /// <summary>
        /// A list of warnings concerning the validity of the result.
        /// </summary>
        /// <value>A list of warnings concerning the validity of the result.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<Warning> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlacesSearchResult {\n");
            sb.Append("  Places: ").Append(Places).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlacesSearchResult);
        }

        /// <summary>
        /// Returns true if PlacesSearchResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PlacesSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlacesSearchResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Places == input.Places ||
                    this.Places != null &&
                    input.Places != null &&
                    this.Places.SequenceEqual(input.Places)
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Places != null)
                {
                    hashCode = (hashCode * 59) + this.Places.GetHashCode();
                }
                if (this.Warnings != null)
                {
                    hashCode = (hashCode * 59) + this.Warnings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
