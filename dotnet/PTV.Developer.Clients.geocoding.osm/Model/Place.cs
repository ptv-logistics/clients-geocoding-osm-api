/*
 * Geocoding OSM
 *
 * With the Geocoding OSM service places can be searched based on OSM data. The search is based on an address, text input or a geographical position.
 *
 * The version of the OpenAPI document: 1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.geocoding.osm.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.geocoding.osm.Model
{
    /// <summary>
    /// Place
    /// </summary>
    [DataContract(Name = "Place")]
    public partial class Place : IEquatable<Place>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Place" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Place() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Place" /> class.
        /// </summary>
        /// <param name="referencePosition">referencePosition (required).</param>
        /// <param name="boundingBox">boundingBox.</param>
        /// <param name="formattedAddress">A single string containing the name and all address elements of a place. (required).</param>
        /// <param name="category">The category of this place, which corresponds to the key of the main OSM tag. (required).</param>
        /// <param name="type">The type of this place, which corresponds to the value of the main OSM tag. Each category is divided into different types. (required).</param>
        public Place(ReferencePosition referencePosition = default(ReferencePosition), BoundingBox boundingBox = default(BoundingBox), string formattedAddress = default(string), string category = default(string), string type = default(string))
        {
            // to ensure "referencePosition" is required (not null)
            if (referencePosition == null)
            {
                throw new ArgumentNullException("referencePosition is a required property for Place and cannot be null");
            }
            this.ReferencePosition = referencePosition;
            // to ensure "formattedAddress" is required (not null)
            if (formattedAddress == null)
            {
                throw new ArgumentNullException("formattedAddress is a required property for Place and cannot be null");
            }
            this.FormattedAddress = formattedAddress;
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new ArgumentNullException("category is a required property for Place and cannot be null");
            }
            this.Category = category;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Place and cannot be null");
            }
            this.Type = type;
            this.BoundingBox = boundingBox;
        }

        /// <summary>
        /// Gets or Sets ReferencePosition
        /// </summary>
        [DataMember(Name = "referencePosition", IsRequired = true, EmitDefaultValue = true)]
        public ReferencePosition ReferencePosition { get; set; }

        /// <summary>
        /// Gets or Sets BoundingBox
        /// </summary>
        [DataMember(Name = "boundingBox", EmitDefaultValue = false)]
        public BoundingBox BoundingBox { get; set; }

        /// <summary>
        /// A single string containing the name and all address elements of a place.
        /// </summary>
        /// <value>A single string containing the name and all address elements of a place.</value>
        [DataMember(Name = "formattedAddress", IsRequired = true, EmitDefaultValue = true)]
        public string FormattedAddress { get; set; }

        /// <summary>
        /// The category of this place, which corresponds to the key of the main OSM tag.
        /// </summary>
        /// <value>The category of this place, which corresponds to the key of the main OSM tag.</value>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// The type of this place, which corresponds to the value of the main OSM tag. Each category is divided into different types.
        /// </summary>
        /// <value>The type of this place, which corresponds to the value of the main OSM tag. Each category is divided into different types.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Place {\n");
            sb.Append("  ReferencePosition: ").Append(ReferencePosition).Append("\n");
            sb.Append("  BoundingBox: ").Append(BoundingBox).Append("\n");
            sb.Append("  FormattedAddress: ").Append(FormattedAddress).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Place);
        }

        /// <summary>
        /// Returns true if Place instances are equal
        /// </summary>
        /// <param name="input">Instance of Place to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Place input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReferencePosition == input.ReferencePosition ||
                    (this.ReferencePosition != null &&
                    this.ReferencePosition.Equals(input.ReferencePosition))
                ) && 
                (
                    this.BoundingBox == input.BoundingBox ||
                    (this.BoundingBox != null &&
                    this.BoundingBox.Equals(input.BoundingBox))
                ) && 
                (
                    this.FormattedAddress == input.FormattedAddress ||
                    (this.FormattedAddress != null &&
                    this.FormattedAddress.Equals(input.FormattedAddress))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferencePosition != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencePosition.GetHashCode();
                }
                if (this.BoundingBox != null)
                {
                    hashCode = (hashCode * 59) + this.BoundingBox.GetHashCode();
                }
                if (this.FormattedAddress != null)
                {
                    hashCode = (hashCode * 59) + this.FormattedAddress.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
